/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * LctKrasnodarWebApi
 * OpenAPI spec version: 1.0
 */
import { customInstance } from "./custom-instance";
import type { BodyType } from "./custom-instance";
export interface WorkerReportShow {
  completedTasks: number;
  completedTasksOfEachGrade: number[];
  completedTasksOfEachType: number[];
  daysWithoutRest: number;
  kilometersPassed: number;
  mainOffice: string;
  mainOfficeLocation: number[];
  mostPopularTask: string;
  timeSpentOnTasks: number;
  updatedAt: string;
  workerCases: string;
  workerEmail: string;
  workerLastname: string;
  workerName: string;
  workerRole: string;
  workerSurname: string;
}

export interface WorkerReportIdDto {
  workerId?: string;
}

export interface WorkerCasePatchDto {
  case: string;
  id: string;
}

export interface UserWithTokenRead {
  token: string;
  user: UserRead;
}

export interface UserShortWCaseRead {
  case: string;
  email: string;
  grade?: string | null;
  id: string;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  surname: string;
}

export interface UserShortRead {
  email: string;
  grade?: string | null;
  id: string;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  surname: string;
}

export interface UserRead {
  email: string;
  id?: string;
  lastname: string;
  name: string;
  role: string;
  surname: string;
}

export interface UserPatchDto {
  email?: string | null;
  grade?: Grade;
  lastname?: string | null;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name?: string | null;
  password?: string | null;
  role?: Role;
  surname?: string | null;
  userId: string;
}

export interface UserLoginDto {
  email: string;
  password: string;
}

export interface UserIdDto {
  userId: string;
}

export interface UserCreationDto {
  email: string;
  grade?: Grade;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  password: string;
  role: Role;
  surname: string;
}

export interface User {
  email: string;
  grade?: Grade;
  id?: string;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  passwordHash: string;
  role: Role;
  surname: string;
}

export interface TargetDataset {
  areCardsAndMaterialsDelivered?: string | null;
  daysSinceLastCardIssue?: number;
  numberOfApprovedApplications?: number;
  numberOfGivenCards?: number;
  whenPointConnected?: string | null;
}

export type Target = (typeof Target)[keyof typeof Target];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Target = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export type SolutionReadEndPointsList = { [key: string]: Endpnt };

export interface SolutionRead {
  endPointsList: SolutionReadEndPointsList;
  user: UserShortRead;
}

export interface Solutions {
  solutionList: SolutionRead[];
}

export type RuleQuantor = (typeof RuleQuantor)[keyof typeof RuleQuantor];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuleQuantor = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export type Role = (typeof Role)[keyof typeof Role];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Role = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type Priority = (typeof Priority)[keyof typeof Priority];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Priority = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface PolylineDto {
  polylineExtremities: number[][];
  shape: string;
}

export interface Point {
  pos: string;
}

export interface PartnerStatsPatchDto {
  areCardsAndMaterialsDelivered?: string | null;
  daysSinceLastCardIssue?: number | null;
  id: number;
  numberOfApprovedApplications?: number | null;
  numberOfGivenCards?: number | null;
  whenPointConnected?: string | null;
}

export interface PartnerShortInfoWTask {
  address: string;
  id: number;
  isActive: boolean;
  locationCoordinates: number[];
  tasks: ConstantTaskSize[];
}

export interface PartnerInfoReadDto {
  address: string;
  areCardsAndMaterialsDelivered: string;
  daysSinceLastCardIssue: number;
  id: number;
  isActive: boolean;
  locationCoordinates: number[];
  numberOfApprovedApplications: number;
  numberOfGivenCards: number;
  whenPointConnected: string;
}

export interface PartnerInfoPatchDto {
  address?: string | null;
  id: number;
  locationCoordinates?: number[] | null;
}

export interface PartnerInfoCreationDto {
  address: string;
  locationCoordinates: number[];
}

export interface PartnerIdDto {
  id: number;
}

export interface Office {
  address: string;
  id: number;
  locationCoordinates: number[];
}

export type Grade = (typeof Grade)[keyof typeof Grade];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Grade = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface GeocoderResponseMetaData {
  found: string;
  point: string;
  request: string;
  results: string;
}

export interface MetaDataProperty {
  geocoderResponseMetaData: GeocoderResponseMetaData;
}

export interface GeocoderCustomResponse {
  addressLine: string;
  poss: number[];
}

export interface GeocodeResponse {
  response: Response;
}

export interface GeocodeRequest {
  address: string;
}

export interface GeoObject {
  boundedBy: BoundedBy;
  description: string;
  metaDataProperty: MetaDataProperty;
  name: string;
  point: Point;
}

export interface FeatureMember {
  geoObject: GeoObject;
}

export interface GeoObjectCollection {
  featureMember: FeatureMember[];
  metaDataProperty: MetaDataProperty;
}

export interface Response {
  geoObjectCollection: GeoObjectCollection;
}

export interface Envelope {
  lowerCorner: string;
  upperCorner: string;
}

export interface Endpnt {
  coordinates: number[];
  routeToEndpoint: string;
}

export interface DayTaskSolution {
  aproximateDayEndTime: string;
  tasks: AssignedTaskShort[];
  worker: User;
}

export interface DayTasks {
  polylineExtremities: number[][];
  tasks: DayTaskSolution[];
}

export interface DaysSolution {
  dayTasksList: DayTasks[];
}

export interface CourierDto {
  date: string;
  grade: Grade;
  id?: number;
  locationCoordinates: number[];
  modifiedAt: string;
  status: string;
  taskId?: number | null;
  taskIds?: number[] | null;
  workerId: string;
  workTime: number;
}

export interface ConstantTaskSizeRead {
  grades: Grade[];
  id: number;
  name: string;
  priority: Priority;
  ruleQuantor: RuleQuantor;
  rules: number[];
  value: string;
}

export interface ConstantTaskSizeIdDto {
  id: number;
}

export interface ConstantTaskSizeCreationDto {
  grades: Grade[];
  name: string;
  priority: Priority;
  ruleQuantor: RuleQuantor;
  rules: number[];
  value: string;
}

export interface ConstantTaskSize {
  grades: Grade[];
  id?: number;
  name: string;
  priority: Priority;
  ruleQuantor: RuleQuantor;
  rules: number[];
  value: string;
}

export interface ConstantTaskRuleIdDto {
  id?: number;
}

export type Condition = (typeof Condition)[keyof typeof Condition];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Condition = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
  NUMBER_12: 12,
} as const;

export interface ConstantTaskRuleCreationDto {
  conditions: Condition[];
  description: string;
  targets: Target[];
  values: string[];
}

export interface ConstantTaskRule {
  conditions: Condition[];
  description: string;
  id?: number;
  targets: Target[];
  values: string[];
}

export interface BoundedBy {
  envelope: Envelope;
}

export interface AssignedTaskShort {
  addressTo: string;
  approximateArrivingTime: string;
  grades: Grade[];
  locationCoordinatesFrom: number[];
  locationCoordinatesTo: number[];
  polyline: PolylineDto;
  priority: Priority;
  taskName: string;
  taskTime: number;
  travelTime: number;
}

export interface AssignedTask {
  addressFrom?: string | null;
  addressTo: string;
  courierId?: string | null;
  createdAt: string;
  date: string;
  grades: Grade[];
  id?: number;
  isDone: boolean;
  locationCoordinatesFrom?: number[] | null;
  locationCoordinatesTo: number[];
  partnerId: number;
  polyline?: string | null;
  priority: Priority;
  size: number;
  taskId: number;
  travelTime?: number | null;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getRulesForPartnerWithGivenId = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskRule[]>(
    {
      url: `/api/Assign/GetRules`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const getTasksForPartnerWithGivenId = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskSize[]>(
    {
      url: `/api/Assign/GetTasks`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const getTasksForPartners = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerShortInfoWTask[]>(
    { url: `/api/Partner/GetTasks`, method: "get" },
    options,
  );
};

export const submitTasksForPartners = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AssignedTask[]>(
    { url: `/api/Assign/SubmitTasks`, method: "get" },
    options,
  );
};

export const releaseTasksForPartners = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/api/Assign/ReleaseTasks`, method: "get" },
    options,
  );
};

export const submitWorkersForToday = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CourierDto[]>(
    { url: `/api/Assign/SubmitWorkers`, method: "get" },
    options,
  );
};

export const releaseWorkersForToday = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/api/Assign/ReleaseWorkers`, method: "get" },
    options,
  );
};

export const distributeTaskToCouriersWithMatchingParameters = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/api/Assign/Distribution`, method: "get" },
    options,
  );
};

export const getTasksForCourierWithGivenId = (
  userIdDto: BodyType<UserIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<AssignedTask[]>(
    {
      url: `/api/Assign/GetCourierTasks`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userIdDto,
    },
    options,
  );
};

export const setPolylineForTakenTask = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/api/Assign/SetPolyline`, method: "get" },
    options,
  );
};

export const getTodayTasksForAllCouriers = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DaysSolution>(
    { url: `/api/Assign/GetTodayTasks`, method: "get" },
    options,
  );
};

export const getTodayTasksForOneCourier = (
  userIdDto: BodyType<UserIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DaysSolution>(
    {
      url: `/api/Assign/GetTodayTasksForCourier`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userIdDto,
    },
    options,
  );
};

export const getAllCouriers = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CourierDto[]>(
    { url: `/api/Assign/GetCouriers`, method: "get" },
    options,
  );
};

export const getBusyCouriers = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CourierDto[]>(
    { url: `/api/Assign/GetBusyCouriers`, method: "get" },
    options,
  );
};

export const getApiAssignmentGetMatrix = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown[]>(
    { url: `/api/Assignment/GetMatrix`, method: "get" },
    options,
  );
};

export const postApiAuthAuthorize = (
  userLoginDto: BodyType<UserLoginDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserWithTokenRead>(
    {
      url: `/api/Auth/Authorize`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userLoginDto,
    },
    options,
  );
};

export const postApiAuthLogin = (
  userLoginDto: BodyType<UserLoginDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserWithTokenRead>(
    {
      url: `/api/Auth/Login`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userLoginDto,
    },
    options,
  );
};

export const getApiAuthLogout = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/api/Auth/Logout`, method: "get" },
    options,
  );
};

export const getApiAuthMe = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserRead>(
    { url: `/api/Auth/Me`, method: "get" },
    options,
  );
};

export const getConstantTasks = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskSizeRead[]>(
    { url: `/api/ConstantTasks/Get`, method: "get" },
    options,
  );
};

export const newConstantTask = (
  constantTaskSizeCreationDto: BodyType<ConstantTaskSizeCreationDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskSizeRead>(
    {
      url: `/api/ConstantTasks/New`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: constantTaskSizeCreationDto,
    },
    options,
  );
};

export const updateConstantTask = (
  constantTaskSize: BodyType<ConstantTaskSize>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskSizeRead>(
    {
      url: `/api/ConstantTasks/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: constantTaskSize,
    },
    options,
  );
};

export const deleteConstantTask = (
  constantTaskSizeIdDto: BodyType<ConstantTaskSizeIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskSizeRead>(
    {
      url: `/api/ConstantTasks/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: constantTaskSizeIdDto,
    },
    options,
  );
};

export const getConstantTaskRules = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskRule[]>(
    { url: `/api/ConstantTasks/Rules/Get`, method: "get" },
    options,
  );
};

export const newConstantTaskRule = (
  constantTaskRuleCreationDto: BodyType<ConstantTaskRuleCreationDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskRule>(
    {
      url: `/api/ConstantTasks/Rule/New`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: constantTaskRuleCreationDto,
    },
    options,
  );
};

export const updateConstantTaskRule = (
  constantTaskRule: BodyType<ConstantTaskRule>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskRule>(
    {
      url: `/api/ConstantTasks/Rule/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: constantTaskRule,
    },
    options,
  );
};

export const deleteConstantTaskRule = (
  constantTaskRuleIdDto: BodyType<ConstantTaskRuleIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskRule>(
    {
      url: `/api/ConstantTasks/Rule/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: constantTaskRuleIdDto,
    },
    options,
  );
};

export const checkIfAnyRuleIsSuitable = (
  targetDataset: BodyType<TargetDataset>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskRule[]>(
    {
      url: `/api/ConstantTasks/Rule/Test`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: targetDataset,
    },
    options,
  );
};

export const geocoder = (
  geocodeRequest: BodyType<GeocodeRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GeocoderCustomResponse>(
    {
      url: `/api/Maps/Geocoder`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: geocodeRequest,
    },
    options,
  );
};

export const geosuggest = (
  geocodeRequest: BodyType<GeocodeRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GeocodeResponse>(
    {
      url: `/api/Maps/Geosuggest`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: geocodeRequest,
    },
    options,
  );
};

export const createNewPartner = (
  partnerInfoCreationDto: BodyType<PartnerInfoCreationDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/New`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerInfoCreationDto,
    },
    options,
  );
};

export const patchPartner = (
  partnerInfoPatchDto: BodyType<PartnerInfoPatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerInfoPatchDto,
    },
    options,
  );
};

export const getAllPartners = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto[]>(
    { url: `/api/Partner/GetAll`, method: "get" },
    options,
  );
};

export const getPartner = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/Get`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const deletePartner = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const reversePartnerStatus = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/Switch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const patchPartnerStatistics = (
  partnerStatsPatchDto: BodyType<PartnerStatsPatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/Stats/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerStatsPatchDto,
    },
    options,
  );
};

export const deletePartnerStatistics = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfoReadDto>(
    {
      url: `/api/Partner/Stats/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const postApiReportGetReport = (
  workerReportIdDto: BodyType<WorkerReportIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<WorkerReportShow>(
    {
      url: `/api/Report/GetReport`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: workerReportIdDto,
    },
    options,
  );
};

export const getTodaySRoutes = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Solutions>(
    { url: `/api/Route/Today`, method: "get" },
    options,
  );
};

export const getApiStatus = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>({ url: `/api/Status`, method: "get" }, options);
};

export const postApiUserNew = (
  userCreationDto: BodyType<UserCreationDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User>(
    {
      url: `/api/User/New`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userCreationDto,
    },
    options,
  );
};

export const getAllUsers = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserShortRead[]>(
    { url: `/api/User/GetShort`, method: "get" },
    options,
  );
};

export const getWorkersWithCases = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserShortWCaseRead[]>(
    { url: `/api/User/Get`, method: "get" },
    options,
  );
};

export const patchUser = (
  userPatchDto: BodyType<UserPatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserShortRead>(
    {
      url: `/api/User/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userPatchDto,
    },
    options,
  );
};

export const patchWorkerCase = (
  workerCasePatchDto: BodyType<WorkerCasePatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/api/User/PatchCase`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: workerCasePatchDto,
    },
    options,
  );
};

export const deleteWorker = (
  userIdDto: BodyType<UserIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/api/User/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userIdDto,
    },
    options,
  );
};

export const getApiOfficeGet = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Office[]>(
    { url: `/api/Office/Get`, method: "get" },
    options,
  );
};

export const solveVehicleRoutingProblem = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/VehicleRouting/solve`, method: "post" },
    options,
  );
};

export type GetRulesForPartnerWithGivenIdResult = NonNullable<
  Awaited<ReturnType<typeof getRulesForPartnerWithGivenId>>
>;
export type GetTasksForPartnerWithGivenIdResult = NonNullable<
  Awaited<ReturnType<typeof getTasksForPartnerWithGivenId>>
>;
export type GetTasksForPartnersResult = NonNullable<
  Awaited<ReturnType<typeof getTasksForPartners>>
>;
export type SubmitTasksForPartnersResult = NonNullable<
  Awaited<ReturnType<typeof submitTasksForPartners>>
>;
export type ReleaseTasksForPartnersResult = NonNullable<
  Awaited<ReturnType<typeof releaseTasksForPartners>>
>;
export type SubmitWorkersForTodayResult = NonNullable<
  Awaited<ReturnType<typeof submitWorkersForToday>>
>;
export type ReleaseWorkersForTodayResult = NonNullable<
  Awaited<ReturnType<typeof releaseWorkersForToday>>
>;
export type DistributeTaskToCouriersWithMatchingParametersResult = NonNullable<
  Awaited<ReturnType<typeof distributeTaskToCouriersWithMatchingParameters>>
>;
export type GetTasksForCourierWithGivenIdResult = NonNullable<
  Awaited<ReturnType<typeof getTasksForCourierWithGivenId>>
>;
export type SetPolylineForTakenTaskResult = NonNullable<
  Awaited<ReturnType<typeof setPolylineForTakenTask>>
>;
export type GetTodayTasksForAllCouriersResult = NonNullable<
  Awaited<ReturnType<typeof getTodayTasksForAllCouriers>>
>;
export type GetTodayTasksForOneCourierResult = NonNullable<
  Awaited<ReturnType<typeof getTodayTasksForOneCourier>>
>;
export type GetAllCouriersResult = NonNullable<
  Awaited<ReturnType<typeof getAllCouriers>>
>;
export type GetBusyCouriersResult = NonNullable<
  Awaited<ReturnType<typeof getBusyCouriers>>
>;
export type GetApiAssignmentGetMatrixResult = NonNullable<
  Awaited<ReturnType<typeof getApiAssignmentGetMatrix>>
>;
export type PostApiAuthAuthorizeResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthAuthorize>>
>;
export type PostApiAuthLoginResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type GetApiAuthLogoutResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthLogout>>
>;
export type GetApiAuthMeResult = NonNullable<
  Awaited<ReturnType<typeof getApiAuthMe>>
>;
export type GetConstantTasksResult = NonNullable<
  Awaited<ReturnType<typeof getConstantTasks>>
>;
export type NewConstantTaskResult = NonNullable<
  Awaited<ReturnType<typeof newConstantTask>>
>;
export type UpdateConstantTaskResult = NonNullable<
  Awaited<ReturnType<typeof updateConstantTask>>
>;
export type DeleteConstantTaskResult = NonNullable<
  Awaited<ReturnType<typeof deleteConstantTask>>
>;
export type GetConstantTaskRulesResult = NonNullable<
  Awaited<ReturnType<typeof getConstantTaskRules>>
>;
export type NewConstantTaskRuleResult = NonNullable<
  Awaited<ReturnType<typeof newConstantTaskRule>>
>;
export type UpdateConstantTaskRuleResult = NonNullable<
  Awaited<ReturnType<typeof updateConstantTaskRule>>
>;
export type DeleteConstantTaskRuleResult = NonNullable<
  Awaited<ReturnType<typeof deleteConstantTaskRule>>
>;
export type CheckIfAnyRuleIsSuitableResult = NonNullable<
  Awaited<ReturnType<typeof checkIfAnyRuleIsSuitable>>
>;
export type GeocoderResult = NonNullable<Awaited<ReturnType<typeof geocoder>>>;
export type GeosuggestResult = NonNullable<
  Awaited<ReturnType<typeof geosuggest>>
>;
export type CreateNewPartnerResult = NonNullable<
  Awaited<ReturnType<typeof createNewPartner>>
>;
export type PatchPartnerResult = NonNullable<
  Awaited<ReturnType<typeof patchPartner>>
>;
export type GetAllPartnersResult = NonNullable<
  Awaited<ReturnType<typeof getAllPartners>>
>;
export type GetPartnerResult = NonNullable<
  Awaited<ReturnType<typeof getPartner>>
>;
export type DeletePartnerResult = NonNullable<
  Awaited<ReturnType<typeof deletePartner>>
>;
export type ReversePartnerStatusResult = NonNullable<
  Awaited<ReturnType<typeof reversePartnerStatus>>
>;
export type PatchPartnerStatisticsResult = NonNullable<
  Awaited<ReturnType<typeof patchPartnerStatistics>>
>;
export type DeletePartnerStatisticsResult = NonNullable<
  Awaited<ReturnType<typeof deletePartnerStatistics>>
>;
export type PostApiReportGetReportResult = NonNullable<
  Awaited<ReturnType<typeof postApiReportGetReport>>
>;
export type GetTodaySRoutesResult = NonNullable<
  Awaited<ReturnType<typeof getTodaySRoutes>>
>;
export type GetApiStatusResult = NonNullable<
  Awaited<ReturnType<typeof getApiStatus>>
>;
export type PostApiUserNewResult = NonNullable<
  Awaited<ReturnType<typeof postApiUserNew>>
>;
export type GetAllUsersResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetWorkersWithCasesResult = NonNullable<
  Awaited<ReturnType<typeof getWorkersWithCases>>
>;
export type PatchUserResult = NonNullable<
  Awaited<ReturnType<typeof patchUser>>
>;
export type PatchWorkerCaseResult = NonNullable<
  Awaited<ReturnType<typeof patchWorkerCase>>
>;
export type DeleteWorkerResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorker>>
>;
export type GetApiOfficeGetResult = NonNullable<
  Awaited<ReturnType<typeof getApiOfficeGet>>
>;
export type SolveVehicleRoutingProblemResult = NonNullable<
  Awaited<ReturnType<typeof solveVehicleRoutingProblem>>
>;
