/**
 * Generated by orval v6.19.1 üç∫
 * Do not edit manually.
 * LctKrasnodarWebApi
 * OpenAPI spec version: 1.0
 */
import { customInstance } from "./custom-instance";
import type { BodyType } from "./custom-instance";
export type CheckIfEmailAlreadyExistsParams = {
  email?: string;
};

export type YesNo = (typeof YesNo)[keyof typeof YesNo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const YesNo = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface WorkerCasePatchDto {
  case: string;
  id: string;
}

export type WhenConnected = (typeof WhenConnected)[keyof typeof WhenConnected];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WhenConnected = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface UserWithTokenRead {
  token: string;
  user: UserRead;
}

export interface UserShortWCaseRead {
  case: string;
  email: string;
  grade?: string | null;
  id: string;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  surname: string;
}

export interface UserShortRead {
  email: string;
  grade?: string | null;
  id: string;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  surname: string;
}

export interface UserRead {
  email: string;
  id?: string;
  lastname: string;
  name: string;
  surname: string;
}

export interface UserPatchDto {
  email?: string | null;
  grade?: Grade;
  lastname?: string | null;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name?: string | null;
  password?: string | null;
  role?: Role;
  surname?: string | null;
  userId: string;
}

export interface UserLoginDto {
  email: string;
  password: string;
}

export interface UserIdDto {
  userId: string;
}

export interface UserCreationDto {
  email: string;
  grade?: Grade;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  password: string;
  role: Role;
  surname: string;
}

export interface User {
  email: string;
  grade?: Grade;
  id?: string;
  lastname: string;
  location?: string | null;
  locationCoordinates?: number[] | null;
  name: string;
  passwordHash: string;
  role: Role;
  surname: string;
}

export type SolutionReadEndPointsList = { [key: string]: Endpnt };

export interface SolutionRead {
  endPointsList: SolutionReadEndPointsList;
  user: UserShortRead;
}

export interface Solutions {
  solutionList: SolutionRead[];
}

export type Role = (typeof Role)[keyof typeof Role];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Role = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface Response {
  geoObjectCollection?: GeoObjectCollection;
}

export interface Point {
  pos?: string | null;
}

export interface PartnerStatsPatchDto {
  areCardsAndMaterialsDelivered?: YesNo;
  daysSinceLastCardIssue?: number | null;
  id?: number;
  numberOfApprovedApplications?: number | null;
  numberOfGivenCards?: number | null;
  whenPointConnected?: WhenConnected;
}

export interface PartnerInfoPatchDto {
  address?: string | null;
  id?: number;
  locationCoordinates?: number[] | null;
}

export interface PartnerInfoCreationDto {
  address: string;
}

export interface PartnerInfo {
  address: string;
  areCardsAndMaterialsDelivered?: YesNo;
  daysSinceLastCardIssue?: number | null;
  id?: number;
  locationCoordinates: number[];
  numberOfApprovedApplications?: number | null;
  numberOfGivenCards?: number | null;
  whenPointConnected?: WhenConnected;
}

export interface PartnerIdDto {
  id?: number;
}

export interface MetaDataProperty {
  geocoderResponseMetaData?: GeocoderResponseMetaData;
}

export type Grade = (typeof Grade)[keyof typeof Grade];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Grade = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface GeocoderResponseMetaData {
  found?: string | null;
  request?: string | null;
  results?: string | null;
}

export interface GeocodeResponse {
  response?: Response;
}

export interface GeocodeRequest {
  address?: string | null;
}

export interface GeoObjectCollection {
  featureMember?: FeatureMember[] | null;
  metaDataProperty?: MetaDataProperty;
}

export interface GeoObject {
  boundedBy?: BoundedBy;
  description?: string | null;
  name?: string | null;
  point?: Point;
}

export interface FeatureMember {
  geoObject?: GeoObject;
}

export interface Envelope {
  lowerCorner?: string | null;
  upperCorner?: string | null;
}

export interface Endpnt {
  coordinates: number[];
  routeToEndpoint: string;
}

export interface ConstantTaskSize {
  grades: Grade[];
  id: number;
  name: string;
  value: string;
}

export interface BoundedBy {
  envelope?: Envelope;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const getAssignmentGetMatrix = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown[]>(
    { url: `/Assignment/GetMatrix`, method: "get" },
    options,
  );
};

export const postAuthLogin = (
  userLoginDto: BodyType<UserLoginDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserWithTokenRead>(
    {
      url: `/Auth/Login`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userLoginDto,
    },
    options,
  );
};

export const getAuthAuthorize = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserRead>(
    { url: `/Auth/Authorize`, method: "get" },
    options,
  );
};

export const getAuthLogout = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/Auth/Logout`, method: "get" },
    options,
  );
};

export const checkIfEmailAlreadyExists = (
  params?: CheckIfEmailAlreadyExistsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/Auth/—Åheck`, method: "get", params },
    options,
  );
};

export const getContstantTasksGetConstantTasks = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ConstantTaskSize[]>(
    { url: `/ContstantTasks/GetConstantTasks`, method: "get" },
    options,
  );
};

export const geocoder = (
  geocodeRequest: BodyType<GeocodeRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GeocodeResponse>(
    {
      url: `/Maps/Geocoder`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: geocodeRequest,
    },
    options,
  );
};

export const geosuggest = (
  geocodeRequest: BodyType<GeocodeRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GeocodeResponse>(
    {
      url: `/Maps/Geosuggest`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: geocodeRequest,
    },
    options,
  );
};

export const createNewPartner = (
  partnerInfoCreationDto: BodyType<PartnerInfoCreationDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/Partner/New`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerInfoCreationDto,
    },
    options,
  );
};

export const patchPartner = (
  partnerInfoPatchDto: BodyType<PartnerInfoPatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/Partner/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerInfoPatchDto,
    },
    options,
  );
};

export const getAllPartners = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfo>(
    { url: `/Partner/GetAll`, method: "get" },
    options,
  );
};

export const getPartner = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfo>(
    {
      url: `/Partner/Get`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const deletePartner = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfo>(
    {
      url: `/Partner/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const patchPartnerStatistics = (
  partnerStatsPatchDto: BodyType<PartnerStatsPatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    {
      url: `/Partner/Stats/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerStatsPatchDto,
    },
    options,
  );
};

export const getAllPartnersStatistics = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfo>(
    { url: `/Partner/Stats/Get`, method: "get" },
    options,
  );
};

export const getPartnerStatistics = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfo>(
    {
      url: `/Partner/Stats/Get`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const deletePartnerStatistics = (
  partnerIdDto: BodyType<PartnerIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PartnerInfo>(
    {
      url: `/Partner/Stats/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: partnerIdDto,
    },
    options,
  );
};

export const getTodaySRoutes = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Solutions>(
    { url: `/Route/Today`, method: "get" },
    options,
  );
};

export const getStatus = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<void>({ url: `/Status`, method: "get" }, options);
};

export const postUserNew = (
  userCreationDto: BodyType<UserCreationDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<User>(
    {
      url: `/User/New`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userCreationDto,
    },
    options,
  );
};

export const getAllUsers = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserShortRead[]>(
    { url: `/User/GetShort`, method: "get" },
    options,
  );
};

export const getWorkersWithCases = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserShortWCaseRead[]>(
    { url: `/User/Get`, method: "get" },
    options,
  );
};

export const patchUser = (
  userPatchDto: BodyType<UserPatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserShortRead>(
    {
      url: `/User/Patch`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userPatchDto,
    },
    options,
  );
};

export const patchWorkerCase = (
  workerCasePatchDto: BodyType<WorkerCasePatchDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/User/PatchCase`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: workerCasePatchDto,
    },
    options,
  );
};

export const deleteWorker = (
  userIdDto: BodyType<UserIdDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    {
      url: `/User/Delete`,
      method: "post",
      headers: { "Content-Type": "application/json-patch+json" },
      data: userIdDto,
    },
    options,
  );
};

export const solveVehicleRoutingProblem = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/VehicleRouting/solve`, method: "post" },
    options,
  );
};

export type GetAssignmentGetMatrixResult = NonNullable<
  Awaited<ReturnType<typeof getAssignmentGetMatrix>>
>;
export type PostAuthLoginResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type GetAuthAuthorizeResult = NonNullable<
  Awaited<ReturnType<typeof getAuthAuthorize>>
>;
export type GetAuthLogoutResult = NonNullable<
  Awaited<ReturnType<typeof getAuthLogout>>
>;
export type CheckIfEmailAlreadyExistsResult = NonNullable<
  Awaited<ReturnType<typeof checkIfEmailAlreadyExists>>
>;
export type GetContstantTasksGetConstantTasksResult = NonNullable<
  Awaited<ReturnType<typeof getContstantTasksGetConstantTasks>>
>;
export type GeocoderResult = NonNullable<Awaited<ReturnType<typeof geocoder>>>;
export type GeosuggestResult = NonNullable<
  Awaited<ReturnType<typeof geosuggest>>
>;
export type CreateNewPartnerResult = NonNullable<
  Awaited<ReturnType<typeof createNewPartner>>
>;
export type PatchPartnerResult = NonNullable<
  Awaited<ReturnType<typeof patchPartner>>
>;
export type GetAllPartnersResult = NonNullable<
  Awaited<ReturnType<typeof getAllPartners>>
>;
export type GetPartnerResult = NonNullable<
  Awaited<ReturnType<typeof getPartner>>
>;
export type DeletePartnerResult = NonNullable<
  Awaited<ReturnType<typeof deletePartner>>
>;
export type PatchPartnerStatisticsResult = NonNullable<
  Awaited<ReturnType<typeof patchPartnerStatistics>>
>;
export type GetAllPartnersStatisticsResult = NonNullable<
  Awaited<ReturnType<typeof getAllPartnersStatistics>>
>;
export type GetPartnerStatisticsResult = NonNullable<
  Awaited<ReturnType<typeof getPartnerStatistics>>
>;
export type DeletePartnerStatisticsResult = NonNullable<
  Awaited<ReturnType<typeof deletePartnerStatistics>>
>;
export type GetTodaySRoutesResult = NonNullable<
  Awaited<ReturnType<typeof getTodaySRoutes>>
>;
export type GetStatusResult = NonNullable<
  Awaited<ReturnType<typeof getStatus>>
>;
export type PostUserNewResult = NonNullable<
  Awaited<ReturnType<typeof postUserNew>>
>;
export type GetAllUsersResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetWorkersWithCasesResult = NonNullable<
  Awaited<ReturnType<typeof getWorkersWithCases>>
>;
export type PatchUserResult = NonNullable<
  Awaited<ReturnType<typeof patchUser>>
>;
export type PatchWorkerCaseResult = NonNullable<
  Awaited<ReturnType<typeof patchWorkerCase>>
>;
export type DeleteWorkerResult = NonNullable<
  Awaited<ReturnType<typeof deleteWorker>>
>;
export type SolveVehicleRoutingProblemResult = NonNullable<
  Awaited<ReturnType<typeof solveVehicleRoutingProblem>>
>;
